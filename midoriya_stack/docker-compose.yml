version: "3.9"

secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  htpasswd:
    file: $SECRETSDIR/htpasswd
  pg_password:
    file: $SECRETSDIR/pg_password
  pg_user:
    file: $SECRETSDIR/pg_user
  pg_database:
    file: $SECRETSDIR/pg_database
  


networks:
  # Net work was set up with: 
  # docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 warp_gate
  warp_gate:
    name: warp_gate
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge

volumes:
  midoriya_db_volume:
    external: true
    name: midoriya_db_volume


services:
  # Database 
  midoriya_db:
    image: postgres
    restart: unless-stopped
    container_name: midoriya_db
    volumes:
      - midoriya_db_volume:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - warp_gate

    environment:
      - POSTGRES_PASSWORD=/run/secrets/pg_password
      - POSTGRES_USER=/run/secrets/pg_user
      - POSTGRES_DB=/run/secrets/pg_database

    secrets:
      - pg_password
      - pg_user
      - pg_database
      
  # Reverse proxy 
  traefik:
    container_name: traefik
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    restart: unless-stopped

    command: # CLI arguments
      # Documentation: https://doc.traefik.io/traefik/reference/static-configuration/cli/
      # Global
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true

      # Entry point rules. All 80 will go to 443 so no need to add rules there
      # as for 8080, that will only be routed AFTER authentication 
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22

      # Enable the dashboard
      - --api=true
      - --api.dashboard=true
      - --api.debug=true

      # Enable logging to see what is going on
      - --log=true
      - --log.level=DEBUG # (Default: error) 
      - --log.filePath=/traefik.log
      - --log.format=common
      - --accessLog=true
      - --accessLog.filePath=/access.log
      - --accessLog.bufferingSize=100 
      - --accessLog.filters.statusCodes=300-499

      # Providers
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false # Prevents auto discovery of containers
      - --providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.network=warp_gate
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder

      # Certificates
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53

    networks:
      warp_gate:
        ipv4_address: 192.168.90.10 # Static IP for traeffik

    security_opt:
        # Prevents processes from elivating 
      - no-new-privileges:true

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host

    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/logs/traefik.log:/traefik.log 
      - $DOCKERDIR/traefik2/logs/access.log:/access.log 
      # - $DOCKERDIR/traefik2/traefik.yml:/traefik.yml:ro

    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
      - UNUSED_VAR=/run/secrets/htpasswd # Var not used, file gets used from the middleware

    secrets:
      - cloudflare_email
      - cloudflare_api_key
      - htpasswd

    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" 
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" 
